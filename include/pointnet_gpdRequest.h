// Generated by gencpp from file gpg/pointnet_gpdRequest.msg
// DO NOT EDIT!


#ifndef GPG_MESSAGE_POINTNET_GPDREQUEST_H
#define GPG_MESSAGE_POINTNET_GPDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gpg/GraspAndPointsList.h>

namespace gpg
{
template <class ContainerAllocator>
struct pointnet_gpdRequest_
{
  typedef pointnet_gpdRequest_<ContainerAllocator> Type;

  pointnet_gpdRequest_()
    : candidates()  {
    }
  pointnet_gpdRequest_(const ContainerAllocator& _alloc)
    : candidates(_alloc)  {
  (void)_alloc;
    }



   typedef  ::gpg::GraspAndPointsList_<ContainerAllocator>  _candidates_type;
  _candidates_type candidates;





  typedef boost::shared_ptr< ::gpg::pointnet_gpdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpg::pointnet_gpdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pointnet_gpdRequest_

typedef ::gpg::pointnet_gpdRequest_<std::allocator<void> > pointnet_gpdRequest;

typedef boost::shared_ptr< ::gpg::pointnet_gpdRequest > pointnet_gpdRequestPtr;
typedef boost::shared_ptr< ::gpg::pointnet_gpdRequest const> pointnet_gpdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gpg::pointnet_gpdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gpg::pointnet_gpdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gpg::pointnet_gpdRequest_<ContainerAllocator1> & lhs, const ::gpg::pointnet_gpdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.candidates == rhs.candidates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gpg::pointnet_gpdRequest_<ContainerAllocator1> & lhs, const ::gpg::pointnet_gpdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gpg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gpg::pointnet_gpdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpg::pointnet_gpdRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpg::pointnet_gpdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpg::pointnet_gpdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpg::pointnet_gpdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpg::pointnet_gpdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gpg::pointnet_gpdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4bc95083b1f2d4f97cb7426980c9b9d4";
  }

  static const char* value(const ::gpg::pointnet_gpdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4bc95083b1f2d4f9ULL;
  static const uint64_t static_value2 = 0x7cb7426980c9b9d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::gpg::pointnet_gpdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpg/pointnet_gpdRequest";
  }

  static const char* value(const ::gpg::pointnet_gpdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gpg::pointnet_gpdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#送给网络进行分类\n"
"gpg/GraspAndPointsList candidates\n"
"\n"
"================================================================================\n"
"MSG: gpg/GraspAndPointsList\n"
"# 存储一个抓取配置list，以及对应的夹爪内部的点云列表\n"
"\n"
"# The time of acquisition, and the coordinate frame ID.\n"
"Header header\n"
"# The list of grasp configurations.\n"
"gpg/GraspConfig[] grasps\n"
"\n"
"#对应的抓取姿态下，夹爪内部的点云列表\n"
"gpg/GripperInnerPoints[] inner_points\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: gpg/GraspConfig\n"
"# This message describes a 2-finger grasp configuration by its 6-DOF pose,\n"
"# consisting of a 3-DOF position and 3-DOF orientation, and the opening\n"
"# width of the robot hand.\n"
"\n"
"# Position\n"
"geometry_msgs/Point position # grasp position (bottom/base center of robot hand)\n"
"\n"
"# Orientation represented as three axis (R = [approach binormal axis])\n"
"geometry_msgs/Vector3 approach # grasp approach direction\n"
"geometry_msgs/Vector3 binormal # hand closing direction\n"
"geometry_msgs/Vector3 axis # hand axis\n"
"\n"
"std_msgs/Float32 width # Required aperture (opening width) of the robot hand\n"
"\n"
"std_msgs/Float32 score # Score assigned to the grasp by the classifier\n"
"\n"
"geometry_msgs/Point sample # point at which the grasp was found\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: gpg/GripperInnerPoints\n"
"# The samples, as (x,y,z) points, 单个夹爪内部的点云列表\n"
"geometry_msgs/Point[] points\n"
;
  }

  static const char* value(const ::gpg::pointnet_gpdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gpg::pointnet_gpdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.candidates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pointnet_gpdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpg::pointnet_gpdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gpg::pointnet_gpdRequest_<ContainerAllocator>& v)
  {
    s << indent << "candidates: ";
    s << std::endl;
    Printer< ::gpg::GraspAndPointsList_<ContainerAllocator> >::stream(s, indent + "  ", v.candidates);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPG_MESSAGE_POINTNET_GPDREQUEST_H
