// Generated by gencpp from file gpg/GraspAndPointsList.msg
// DO NOT EDIT!


#ifndef GPG_MESSAGE_GRASPANDPOINTSLIST_H
#define GPG_MESSAGE_GRASPANDPOINTSLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <gpg/GraspConfig.h>
#include <gpg/GripperInnerPoints.h>

namespace gpg
{
template <class ContainerAllocator>
struct GraspAndPointsList_
{
  typedef GraspAndPointsList_<ContainerAllocator> Type;

  GraspAndPointsList_()
    : header()
    , grasps()
    , inner_points()  {
    }
  GraspAndPointsList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , grasps(_alloc)
    , inner_points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::gpg::GraspConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gpg::GraspConfig_<ContainerAllocator> >::other >  _grasps_type;
  _grasps_type grasps;

   typedef std::vector< ::gpg::GripperInnerPoints_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gpg::GripperInnerPoints_<ContainerAllocator> >::other >  _inner_points_type;
  _inner_points_type inner_points;





  typedef boost::shared_ptr< ::gpg::GraspAndPointsList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpg::GraspAndPointsList_<ContainerAllocator> const> ConstPtr;

}; // struct GraspAndPointsList_

typedef ::gpg::GraspAndPointsList_<std::allocator<void> > GraspAndPointsList;

typedef boost::shared_ptr< ::gpg::GraspAndPointsList > GraspAndPointsListPtr;
typedef boost::shared_ptr< ::gpg::GraspAndPointsList const> GraspAndPointsListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gpg::GraspAndPointsList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gpg::GraspAndPointsList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gpg::GraspAndPointsList_<ContainerAllocator1> & lhs, const ::gpg::GraspAndPointsList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.grasps == rhs.grasps &&
    lhs.inner_points == rhs.inner_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gpg::GraspAndPointsList_<ContainerAllocator1> & lhs, const ::gpg::GraspAndPointsList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gpg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gpg::GraspAndPointsList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpg::GraspAndPointsList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpg::GraspAndPointsList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpg::GraspAndPointsList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpg::GraspAndPointsList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpg::GraspAndPointsList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gpg::GraspAndPointsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db76778cce49b8f21f978380709f1a8b";
  }

  static const char* value(const ::gpg::GraspAndPointsList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb76778cce49b8f2ULL;
  static const uint64_t static_value2 = 0x1f978380709f1a8bULL;
};

template<class ContainerAllocator>
struct DataType< ::gpg::GraspAndPointsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpg/GraspAndPointsList";
  }

  static const char* value(const ::gpg::GraspAndPointsList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gpg::GraspAndPointsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 存储一个抓取配置list，以及对应的夹爪内部的点云列表\n"
"\n"
"# The time of acquisition, and the coordinate frame ID.\n"
"Header header\n"
"# The list of grasp configurations.\n"
"gpg/GraspConfig[] grasps\n"
"\n"
"#对应的抓取姿态下，夹爪内部的点云列表\n"
"gpg/GripperInnerPoints[] inner_points\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: gpg/GraspConfig\n"
"# This message describes a 2-finger grasp configuration by its 6-DOF pose,\n"
"# consisting of a 3-DOF position and 3-DOF orientation, and the opening\n"
"# width of the robot hand.\n"
"\n"
"# Position\n"
"geometry_msgs/Point position # grasp position (bottom/base center of robot hand)\n"
"\n"
"# Orientation represented as three axis (R = [approach binormal axis])\n"
"geometry_msgs/Vector3 approach # grasp approach direction\n"
"geometry_msgs/Vector3 binormal # hand closing direction\n"
"geometry_msgs/Vector3 axis # hand axis\n"
"\n"
"std_msgs/Float32 width # Required aperture (opening width) of the robot hand\n"
"\n"
"std_msgs/Float32 score # Score assigned to the grasp by the classifier\n"
"\n"
"geometry_msgs/Point sample # point at which the grasp was found\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: gpg/GripperInnerPoints\n"
"# The samples, as (x,y,z) points, 单个夹爪内部的点云列表\n"
"geometry_msgs/Point[] points\n"
;
  }

  static const char* value(const ::gpg::GraspAndPointsList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gpg::GraspAndPointsList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.grasps);
      stream.next(m.inner_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspAndPointsList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpg::GraspAndPointsList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gpg::GraspAndPointsList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "grasps[]" << std::endl;
    for (size_t i = 0; i < v.grasps.size(); ++i)
    {
      s << indent << "  grasps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gpg::GraspConfig_<ContainerAllocator> >::stream(s, indent + "    ", v.grasps[i]);
    }
    s << indent << "inner_points[]" << std::endl;
    for (size_t i = 0; i < v.inner_points.size(); ++i)
    {
      s << indent << "  inner_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gpg::GripperInnerPoints_<ContainerAllocator> >::stream(s, indent + "    ", v.inner_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPG_MESSAGE_GRASPANDPOINTSLIST_H
