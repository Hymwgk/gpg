// Generated by gencpp from file gpg/pointnet_gpdResponse.msg
// DO NOT EDIT!


#ifndef GPG_MESSAGE_POINTNET_GPDRESPONSE_H
#define GPG_MESSAGE_POINTNET_GPDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int64.h>

namespace gpg
{
template <class ContainerAllocator>
struct pointnet_gpdResponse_
{
  typedef pointnet_gpdResponse_<ContainerAllocator> Type;

  pointnet_gpdResponse_()
    : best_grasp_id()  {
    }
  pointnet_gpdResponse_(const ContainerAllocator& _alloc)
    : best_grasp_id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int64_<ContainerAllocator>  _best_grasp_id_type;
  _best_grasp_id_type best_grasp_id;





  typedef boost::shared_ptr< ::gpg::pointnet_gpdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpg::pointnet_gpdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct pointnet_gpdResponse_

typedef ::gpg::pointnet_gpdResponse_<std::allocator<void> > pointnet_gpdResponse;

typedef boost::shared_ptr< ::gpg::pointnet_gpdResponse > pointnet_gpdResponsePtr;
typedef boost::shared_ptr< ::gpg::pointnet_gpdResponse const> pointnet_gpdResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gpg::pointnet_gpdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gpg::pointnet_gpdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gpg::pointnet_gpdResponse_<ContainerAllocator1> & lhs, const ::gpg::pointnet_gpdResponse_<ContainerAllocator2> & rhs)
{
  return lhs.best_grasp_id == rhs.best_grasp_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gpg::pointnet_gpdResponse_<ContainerAllocator1> & lhs, const ::gpg::pointnet_gpdResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gpg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gpg::pointnet_gpdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpg::pointnet_gpdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpg::pointnet_gpdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpg::pointnet_gpdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpg::pointnet_gpdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpg::pointnet_gpdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gpg::pointnet_gpdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bdc3164c3f57cd0b4b0b9a2e3b5dfd05";
  }

  static const char* value(const ::gpg::pointnet_gpdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbdc3164c3f57cd0bULL;
  static const uint64_t static_value2 = 0x4b0b9a2e3b5dfd05ULL;
};

template<class ContainerAllocator>
struct DataType< ::gpg::pointnet_gpdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpg/pointnet_gpdResponse";
  }

  static const char* value(const ::gpg::pointnet_gpdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gpg::pointnet_gpdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#返回最优的抓取的id\n"
"std_msgs/Int64 best_grasp_id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int64\n"
"int64 data\n"
;
  }

  static const char* value(const ::gpg::pointnet_gpdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gpg::pointnet_gpdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.best_grasp_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pointnet_gpdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpg::pointnet_gpdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gpg::pointnet_gpdResponse_<ContainerAllocator>& v)
  {
    s << indent << "best_grasp_id: ";
    s << std::endl;
    Printer< ::std_msgs::Int64_<ContainerAllocator> >::stream(s, indent + "  ", v.best_grasp_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPG_MESSAGE_POINTNET_GPDRESPONSE_H
